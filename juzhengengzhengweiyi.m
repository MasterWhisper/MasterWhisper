clear all;
clc;
%% 基本参数
mm=27; %模数
zs=23;
zp=17;
zr=57;
rs=27*23/1000/2;
rr=27*57/1000/2;
rp=27*17/1000/2;
rc=rs+rp;
%% 质量矩阵  18×18 M
mc=5091;
mr=900;
ms=750;
m1=525;
m2=525;
m3=525;
cc=[mc,mc,5724];  %尾末最后一位是I/r^2
Mc=diag(cc);
r=[mr,mr,1092];
Mr=diag(r);
s=[ms,ms,663];
Ms=diag(s);
p1=[m1,m1,420];
M1=diag(p1);
M2=M1;
M3=M2;
Mtotal=[cc,r,s,p1,p1,p1];
M=diag(Mtotal);  %质量矩阵 依次为行星架 内齿圈 太阳轮 行星轮1 2 3 4 5
%% 向心矩阵  18×18 Komoge
co=[mc,mc,0];  %尾末最后一位是I/r^2
Mco=diag(co);
ro=[mr,mr,0];
Mro=diag(ro);
so=[ms,ms,0];
Mso=diag(so);
p1o=[m1,m1,0];
M1o=diag(p1o);
M2o=M1o;
M3o=M2o;
Mtotalo=[co,ro,so,p1o,p1o,p1o];
Komoge=diag(Mtotalo); %质量矩阵 依次为行星架 内齿圈 太阳轮 行星轮1 2 3 4 5
%% 支撑刚度矩阵   18×18
ooo=[0 0 0];
kcx=1e8;  %支撑刚度
kcy=1e8;
kcu=0;    %旋转刚度
kc=[kcx,kcy,kcu];
Kcb=diag(kc);
krx=1e8;  %支撑刚度
kry=1e8;
kru=1e9;    %旋转刚度
kr=[krx,kry,kru];
Krb=diag(kr);
ksx=1e8;
kxy=1e8;
ksu=0;
ks=[ksx,kxy,ksu];
Ksb=diag(ks);
kpx=1e8;
kpy=1e8;
kpu=0;
kp=[kpx,kpy,kpu];
Kp=diag(kp);
B=[kc,kr,ks,ooo,ooo,ooo];  %行星轮支撑刚度为0    只考虑行星架 太阳轮 和内齿圈 行星轮不考虑
%B=[kc,kr,ks,kp,kp,kp]
Kb=diag(B);
%% 陀螺矩阵 G 18×18
o=[0 0 0; 0 0 0; 0 0 0];
Gc=[0 -2*mc 0; 2*mc 0 0;0 0 0];
Gr=[0 -2*mr 0; 2*mr 0 0;0 0 0];
Gs=[0 -2*ms 0; 2*ms 0 0;0 0 0];
Gp=[0 -2*m1 0; 2*m1 0 0;0 0 0];
G=[Gc o o o o o ;
    o Gr o o o o ;
    o o Gs o o o ;
    o o o Gp o o ;
    o o o o Gp o ;
    o o o o o Gp ];
%% 啮合刚度矩阵  psin为行星轮位置角 psin=2pi*（N-1)/N
%行星轮安装位置角 0 120 240 
p1=0;
p2=120;
p3=240;
% 与太阳轮的啮合角
ps1=-20;
ps2=100;
ps3=220;
%与内齿圈啮合角
pr1=20;
pr2=140;
pr3=260;
%压力角
alpha=20;
kp=1e8;  %行星轮支撑刚度
c33=[1e8 1e8 0];
%Kc1n求和
Kc11=kp*[1 0 -sind(p1);0 1 cosd(p1);-sind(p1) cosd(p1) 1];
Kc12=kp*[1 0 -sind(p2);0 1 cosd(p2);-sind(p2) cosd(p2) 1];
Kc13=kp*[1 0 -sind(p3);0 1 cosd(p3);-sind(p3) cosd(p3) 1];
Kc1n=Kc11+Kc12+Kc13;

%Kc2n
Kc21=kp*[-cosd(p1) sind(p1) 0;-sind(p1) -cosd(p1) 0;0 -1 0];
Kc22=kp*[-cosd(p2) sind(p2) 0;-sind(p2) -cosd(p2) 0;0 -1 0];
Kc23=kp*[-cosd(p3) sind(p3) 0;-sind(p3) -cosd(p3) 0;0 -1 0];

%Kc3n
Kc31=diag(c33);
Kc32=Kc31;
Kc33=Kc31;
%Kr1n *********************这个需要使用时变啮合刚度来进行求解*****************************
%势能法求解时变啮合刚度  可能是三行三列
% Ksum=[4577600122.14519,4600383838.92468,4621412059.88965,4640701621.73974,4658257643.29820,4674075281.02448,4688160662.73909,4700535394.26533,4711178654.76765,4720093589.47918,4727289368.71912,4732776407.73186,4736535658.70649,4738568408.03451,4738879713.07319,4737490928.19341,4734371050.23230,4729518784.08657,4722937072.39863,4714633097.43110,4704602152.11089,4692813362.74077,4679263740.75505,4663935633.48594,4646825237.89344,4627916144.89572,4607149473.73463,2531610076.44814,2537164396.15465,2542342411.30950,2547148830.38992,2551590157.95325,2555672329.26017,2559402366.73694,2562784305.04226,2565819079.00162,2568510068.25387,2570860132.08513,2572875888.06504,2574555301.62868,2575899527.80339,2576910527.78536,2577590028.60306,2577944976.49184,2577970637.75477,2577668175.37338,2577039102.00632,2576084802.96406,2574811684.90464,2573216486.02483,2571298671.45797,2569059783.47563,2566501246.95706,2563625900.50640,4543863529.03626,4568292324.10238,4590855313.56558,4611576949.48727,4630468795.37007,4647531424.49995,4662775198.90951,4676224895.30616,4687863034.95722,4697695102.40343,4705732151.80235,4711986127.33030,4716439729.69856,4719095436.32704,4719959388.43469,4719053712.22067,4716348817.45692,4711844381.56202,4705544406.59390,4697457114.27971,4687579142.24599,4675881222.81411,4662361959.16777,4647005540.76217,4629810164.12443,4610761728.17031,4589804112.82328]
%%势能法
% ksp=[262186048.765961,263153951.496935,264051497.262220,265004877.407990,265828279.072055,266582806.465137,267359892.882925,267970454.376379,268651599.757437,269172158.254600,269688466.494972,270141392.911167,270515962.950143,270822643.086619,271130324.057385,271295133.792446,271439347.687641,271616082.061562,271662440.085193,271632729.743362,271581276.650492,271475544.922054,271254531.318788,271097939.664378,270776753.883036,270404428.503126,269943889.194999,269469130.582844,268942294.835984,268391545.725314,267725908.012244,267041573.784619,266303246.736992,265429443.238738,264438384.011712,263452484.335696,146327899.196638,146751296.450690,147143422.672699,147523127.250737,147880478.510367,148208571.728773,148521967.587360,148753780.930065,149022514.176497,149210116.937906,149433905.665842,149577034.577727,149697907.630511,149853843.674312,149873377.449028,149926402.971746,149956799.606032,150020487.773997,149947170.051606,149908354.360159,149787849.860405,149702330.032023,149534125.749084,149341620.457796,149184811.365718,148943722.295525,148677870.131407,148396145.240748,262409031.741887,263415911.985661,264373149.013259,265159472.328055,266019972.343547,266864754.528865,267510057.233856,268226363.559469,268777652.756480,269297640.527094,269753974.204801,270277251.477737,270573401.051079,270916643.883582,271227900.219166,271379955.000741,271577156.438947,271591748.150812,271666352.381936,271582514.631184,271555778.649500,271442127.737507,271208553.856878,270924252.953090,270660904.767234,270275314.028250,269838244.366481,269349374.286469,268773152.758315,268180281.052680,267534368.756793,266753660.292781,266000241.004305,265191885.392252,264247335.425522,263265633.388946;
%     262186048.765961,263153951.496935,264051497.262220,265004877.407990,265828279.072055,266582806.465137,267359892.882925,267970454.376379,268651599.757437,269172158.254600,269688466.494972,270141392.911167,270515962.950143,270822643.086619,271130324.057385,271295133.792446,271439347.687641,271616082.061562,271662440.085193,271632729.743362,271581276.650492,271475544.922054,271254531.318788,271097939.664378,270776753.883036,270404428.503126,269943889.194999,269469130.582844,268942294.835984,268391545.725314,267725908.012244,267041573.784619,266303246.736992,265429443.238738,264438384.011712,263452484.335696,146327899.196638,146751296.450690,147143422.672699,147523127.250737,147880478.510367,148208571.728773,148521967.587360,148753780.930065,149022514.176497,149210116.937906,149433905.665842,149577034.577727,149697907.630511,149853843.674312,149873377.449028,149926402.971746,149956799.606032,150020487.773997,149947170.051606,149908354.360159,149787849.860405,149702330.032023,149534125.749084,149341620.457796,149184811.365718,148943722.295525,148677870.131407,148396145.240748,262409031.741887,263415911.985661,264373149.013259,265159472.328055,266019972.343547,266864754.528865,267510057.233856,268226363.559469,268777652.756480,269297640.527094,269753974.204801,270277251.477737,270573401.051079,270916643.883582,271227900.219166,271379955.000741,271577156.438947,271591748.150812,271666352.381936,271582514.631184,271555778.649500,271442127.737507,271208553.856878,270924252.953090,270660904.767234,270275314.028250,269838244.366481,269349374.286469,268773152.758315,268180281.052680,267534368.756793,266753660.292781,266000241.004305,265191885.392252,264247335.425522,263265633.388946;
%     262186048.765961,263153951.496935,264051497.262220,265004877.407990,265828279.072055,266582806.465137,267359892.882925,267970454.376379,268651599.757437,269172158.254600,269688466.494972,270141392.911167,270515962.950143,270822643.086619,271130324.057385,271295133.792446,271439347.687641,271616082.061562,271662440.085193,271632729.743362,271581276.650492,271475544.922054,271254531.318788,271097939.664378,270776753.883036,270404428.503126,269943889.194999,269469130.582844,268942294.835984,268391545.725314,267725908.012244,267041573.784619,266303246.736992,265429443.238738,264438384.011712,263452484.335696,146327899.196638,146751296.450690,147143422.672699,147523127.250737,147880478.510367,148208571.728773,148521967.587360,148753780.930065,149022514.176497,149210116.937906,149433905.665842,149577034.577727,149697907.630511,149853843.674312,149873377.449028,149926402.971746,149956799.606032,150020487.773997,149947170.051606,149908354.360159,149787849.860405,149702330.032023,149534125.749084,149341620.457796,149184811.365718,148943722.295525,148677870.131407,148396145.240748,262409031.741887,263415911.985661,264373149.013259,265159472.328055,266019972.343547,266864754.528865,267510057.233856,268226363.559469,268777652.756480,269297640.527094,269753974.204801,270277251.477737,270573401.051079,270916643.883582,271227900.219166,271379955.000741,271577156.438947,271591748.150812,271666352.381936,271582514.631184,271555778.649500,271442127.737507,271208553.856878,270924252.953090,270660904.767234,270275314.028250,269838244.366481,269349374.286469,268773152.758315,268180281.052680,267534368.756793,266753660.292781,266000241.004305,265191885.392252,264247335.425522,263265633.388946];
% Ksp=ksp'
Ksp=5e9;%太阳轮行星轮副平均啮合刚度
Krp=7e9;%内齿圈行星轮副平均啮合刚度
Kr11=Krp*[sind(pr1)^2 -cosd(pr1)*sind(pr1) -sind(pr1);   %3*3矩阵
    -cosd(pr1)*sind(pr1) cosd(pr1)^2 cosd(pr1);
    -sind(pr1) cosd(pr1) 1];
Kr12=Krp*[sind(pr2)^2 -cosd(pr2)*sind(pr2) -sind(pr2);
    -cosd(pr2)*sind(pr2) cosd(pr2)^2 cosd(pr2);
    -sind(pr2) cosd(pr2) 1];
Kr13=Krp*[sind(pr3)^2 -cosd(pr3)*sind(pr3) -sind(pr3);
    -cosd(pr3)*sind(pr3) cosd(pr3)^2 cosd(pr3);
    -sind(pr3) cosd(pr3) 1];
Kr1n=Kr11+Kr12+Kr13;
%Kr2n
Kr21=Krp*[-sind(pr1)*sind(alpha) sind(pr1)*cosd(alpha) sind(pr1);
    cosd(pr1)*sind(alpha) -cosd(pr1)*cosd(alpha) -cosd(pr1);
    sind(alpha) -cosd(alpha) -1];
Kr22=Krp*[-sind(pr2)*sind(alpha) sind(pr2)*cosd(alpha) sind(pr2);
    cosd(pr2)*sind(alpha) -cosd(pr2)*cosd(alpha) -cosd(pr2);
    sind(alpha) -cosd(alpha) -1];
Kr23=Krp*[-sind(pr3)*sind(alpha) sind(pr3)*cosd(alpha) sind(pr3);
    cosd(pr3)*sind(alpha) -cosd(pr3)*cosd(alpha) -cosd(pr3);
    sind(alpha) -cosd(alpha) -1];
%Kr3n
Kr31=Krp*[sind(alpha)^2 -cosd(alpha)*sind(alpha) -sind(alpha);
    -cosd(alpha)*sind(alpha) cosd(alpha)^2 -cosd(alpha);
    -sind(alpha) cosd(alpha)^2 1];
Kr32=Kr31;
Kr33=Kr31;
Kr3n=Kr31+Kr32+Kr33;
%Ks1n
Ks11=Ksp*[sind(ps1)^2 -cosd(ps1)*sind(ps1) -sind(ps1);
    -cosd(ps1)*sind(ps1) cosd(ps1)^2 cosd(ps1);
    -sind(ps1) cosd(ps1) 1];
Ks12=Ksp*[sind(ps2)^2 -cosd(ps2)*sind(ps2) -sind(ps2);
    -cosd(ps2)*sind(ps2) cosd(ps2)^2 cosd(ps2);
    -sind(ps2) cosd(ps2) 1];
Ks13=Ksp*[sind(ps3)^2 -cosd(ps3)*sind(ps3) -sind(ps3);
    -cosd(ps3)*sind(ps3) cosd(ps3)^2 cosd(ps3);
    -sind(ps3) cosd(ps3) 1];
Ks1n=Ks11+Ks12+Ks13;

%Ks2n
Ks21=Ksp*[sind(ps1)*sind(alpha) sind(ps1)*cosd(alpha) -sind(ps1);
    -cosd(ps1)*sind(alpha) -cosd(ps1)*cosd(alpha) cosd(ps1);
    -sind(alpha) -cosd(alpha) 1];
Ks22=Ksp*[sind(ps2)*sind(alpha) sind(ps2)*cosd(alpha) -sind(ps2);
    -cosd(ps2)*sind(alpha) -cosd(ps2)*cosd(alpha) cosd(ps2);
    -sind(alpha) -cosd(alpha) 1];
Ks23=Ksp*[sind(ps3)*sind(alpha) sind(ps3)*cosd(alpha) -sind(ps3);
    -cosd(ps3)*sind(alpha) -cosd(ps3)*cosd(alpha) cosd(ps3);
    -sind(alpha) -cosd(alpha) 1];
Ks2n=Ks21+Ks22+Ks23;
%Ks3n
Ks31=Ksp*[sind(alpha)^2 cosd(alpha)*sind(alpha) -sind(alpha);
    cosd(alpha)*sind(alpha) cosd(alpha)^2 -cosd(alpha);
    -sind(alpha) -cosd(alpha) 1];
Ks32=Ks31;
Ks33=Ks31;
%Kpp
Kpp1=Kc31+Kr31+Ks31;
Kpp2=Kc32+Kr32+Ks32;
Kpp3=Kc33+Kr33+Ks33;
o=zeros(3);
Km=[Kc1n o o Kc21 Kc22 Kc23;
    o Kr1n o Kr21 Kr22 Kr23;
    o o Ks1n Ks21 Ks22 Ks23;
    Kc21 Kr21 Ks21 Kpp1 o o;
    Kc22 Kr22 Ks22 o Kpp2 o;
    Kc23 Kr23 Ks23 o o Kpp3];
%% newark1
k=Kb+Km+G+Komoge;
m=M;
alfa=0.25;beta=0.5;
% c1=[1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000];
% c=diag(c1);
c=beta*m+alfa*k;
% c=zeros(18)
%激励
O=[0 0 0];
Tc=100000;
Ts=600;
esp1=0.005;
erp1=esp1;
Fr=Krp*erp1*[sind(pr1),-cosd(pr1),1];
Fs=Ksp*esp1*[sind(ps1),-cosd(ps1),1];
F1=Krp*erp1*[sind(alpha),-sind(alpha),-1]+Ksp*esp1*[sin(alpha),-sin(alpha),1];
f0=[O Fr Fs F1 F1 F1]';
% f0=[170,170,0,0,0,0,600,600,0,401,401,0,401,401,0,401,401,0]
% f0=[0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;600];    %%输入激励
x0=[0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];    %%输入初始位移
v0=[0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];    %%输入初始速度
aa0=inv(m)*[f0-c*v0-k*x0];   %%计算初始加速度
tm=5;dt=0.01;
nt=tm/dt;
x=[x0,zeros(18,nt)];
v=[v0,zeros(18,nt)];
aa=[aa0,zeros(18,nt)];
T=[0:dt:tm];
alfa=0.25;beta=0.5;
a0=1/alfa/dt/dt;
a1=beta/alfa/dt;
a2=1/alfa/dt;
a3=1/2/alfa-1;
a4=beta/alfa-1;
a5=dt/2*(beta/alfa-2);
a6=dt*(1-beta);
a7=dt*beta;
for i=2:nt+1
t=(i-1)*dt;
fi=[0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];
f=fi;
ke=k+a0*m+a1*c;
fe=f+m*(a0*x(:,i-1)+a2*v(:,i-1)+a3*aa(:,i-1))+c*(a1*x(:,i-1)+a4*v(:,i-1)+a5*aa(:,i-1));  %有限载荷
x(:,i)=fe\ke;
aa(:,i)=a0*(x(:,i)-x(:,i-1))-a2*v(:,i-1)-a3*aa(:,i-1);
% aa(:,i)=1/alfa/dt/dt*(x(:,i)-x(:,i-1))-1/alfa/dt*x(:,i-1)-(1/2/alfa-1)*aa(:,i-1);
v(:,i)=v(:,i-1)+a6*aa(:,i-1)+a7*aa(:,i);
end
%% newmark2 湘潭大学 航空封闭差动行星传动刚柔耦合动力学分析 沈成功
k=Kb+Km;
m=M;
alfa=0.25;beta=0.5;
c=beta*m+alfa*k;
% c=zeros(18)
%激励
O=[0 0 0];
Tc=100000;
Ts=28750;
esp1=0.005;
erp1=esp1;
% Fr=Krp*erp1*[sind(pr1),-cosd(pr1),1];
% Fs=Ksp*esp1*[sind(ps1),-cosd(ps1),1];
% F1=Krp*erp1*[sind(alpha),-sind(alpha),-1]+Ksp*esp1*[sin(alpha),-sin(alpha),1];
% f0=[O Fr Fs F1 F1 F1]';
f0=[0;0;0;0;0;0;0;0;100000;0;0;0;0;0;0;0;0;75000];    %%输入激励
x0=[0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];    %%输入初始位移
v0=[0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];    %%输入初始速度
aa0=inv(m)*[f0-c*v0-k*x0];   %%计算初始加速度
tm=5;dt=0.01;
nt=tm/dt;
x=[x0,zeros(18,nt)];
v=[v0,zeros(18,nt)];
aa=[aa0,zeros(18,nt)];
T=[0:dt:tm];
alfa=0.25;beta=0.5;
a1=1/alfa/dt/dt;
a2=beta/alfa/dt;
a3=1/alfa/dt;
a4=1/2/alfa-1;
a5=dt/2*(beta/alfa-2);
a6=beta/alfa-1;
for i=2:nt+1
t=(i-1)*dt;
fi=[0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];
f=fi;
ke=k+a1*m+a2*c;
fe=f+m*(a1*x(:,i-1)+a3*v(:,i-1)+a4*aa(:,i-1))+c*(a2*x(:,i-1)+a6*v(:,i-1)+a5*aa(:,i-1));  %有限载荷
x(:,i)=fe\ke;
aa(:,i)=a1*(x(:,i)-x(:,i-1))-1/alfa/dt*x(:,i-1)-(1/2/alfa-1)*aa(:,i-1);
% aa(:,i)=1/alfa/dt/dt*(x(:,i)-x(:,i-1))-1/alfa/dt*x(:,i-1)-(1/2/alfa-1)*aa(:,i-1);
v(:,i)=v(:,i-1)+(1-beta)*dt*aa(:,i-1)+dt*beta*aa(:,i);
end
%% 绘图
for dof_plot=1:18;             %绘图自由度位移
figure(dof_plot)
plot(T,x(dof_plot,:))
xlabel('Time/s')
ylabel(['DISP of dof',num2str(dof_plot)])
end
%%
for dof_plot=1:18;             %绘图自由度速度
figure(dof_plot)
plot(T,v(dof_plot,:))
xlabel('Time/s')
ylabel(['DISP of dof',num2str(dof_plot)])
end
%%
for dof_plot=1:18;             %绘图自由度加速度
figure(dof_plot)
plot(T,aa(dof_plot,:))
xlabel('Time/s')
ylabel(['DISP of dof',num2str(dof_plot)])
end

